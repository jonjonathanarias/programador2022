El dise√±o de una base de datos consiste en definir la estructura de los datos que debe tener un sistema de informaci√≥n determinado. Para ello se suelen seguir por regla general unas fases en el proceso de dise√±o, definiendo para ello el modelo conceptual, el l√≥gico y el f√≠sico. (Si est√°s empezando con SQL, recuerda que todo esto lo tratamos en nuestro curso de SQL y con la ventaja de poder resolver dudas con un tutor especialista)

En el dise√±o conceptual se hace una descripci√≥n de alto nivel de la estructura de la base de datos, independientemente del SGBD (Sistema Gestor de Bases de Datos) que se vaya a utilizar para manipularla. Su objetivo es describir el contenido de informaci√≥n de la base de datos y no las estructuras de almacenamiento que se necesitar√°n para manejar dicha informaci√≥n.
El dise√±o l√≥gico parte del resultado del dise√±o conceptual y da como resultado una descripci√≥n de la estructura de la base de datos en t√©rminos de las estructuras de datos que puede procesar un tipo de SGBD. El dise√±o l√≥gico depende del tipo de SGBD que se vaya a utilizar, se adapta a la tecnolog√≠a que se debe emplear, pero no depende del producto concreto. En el caso de bases de datos convencionales relacionales (basadas en SQL para entendernos), el dise√±o l√≥gico consiste en definir las tablas que existir√°n, las relaciones entre ellas, normalizarlas, etc...
El dise√±o f√≠sico parte del l√≥gico y da como resultado una descripci√≥n de la implementaci√≥n de una base de datos en memoria secundaria: las estructuras de almacenamiento y los m√©todos utilizados para tener un acceso eficiente a los datos. Aqu√≠ el objetivo es conseguir una mayor eficiencia, y se tienen en cuenta aspectos concretos del SGBD sobre el que se vaya a implementar. Por regla general esto es transparente para el usuario, aunque conocer c√≥mo se implementa ayuda a optimizar el rendimiento y la escalabilidad del sistema.
Nota: Si esta serie de art√≠culos sobre SQL te est√° pareciendo interesante, ni te imaginas lo que puedes aprender con este curso de fundamentos de SQL.

El modelo relacional
En el modelo relacional las dos capas de dise√±o conceptual y l√≥gico, se parecen mucho. Generalmente se implementan mediante diagramas de Entidad/Relaci√≥n (modelo conceptual) y tablas y relaciones entre √©stas (modelo l√≥gico). Este es el modelo utilizado por los sistemas gestores de datos m√°s habituales (SQL Server, Oracle, MySQL...).

Nota: Aunque mucha gente no lo sabe, a las bases de datos relaciones se les denomina as√≠ porque almacenan los datos en forma de ‚ÄúRelaciones‚Äù o listas de datos, es decir, en lo que llamamos habitualmente ‚ÄúTablas‚Äù. Muchas personas se piensan que el nombre viene porque adem√°s las tablas se relacionan entre s√≠ utilizando claves externas. No es as√≠, y es un concepto que debemos tener claro. (Tabla = Relaci√≥n).

El modelo relacional de bases de datos se rige por algunas normas sencillas:

Todos los datos se representan en forma de tablas (tambi√©n llamadas ‚Äúrelaciones‚Äù, ver nota anterior). Incluso los resultados de consultar otras tablas. La tabla es adem√°s la unidad de almacenamiento principal.
Las tablas est√°n compuestas por filas (o registros) y columnas (o campos) que almacenan cada uno de los registros (la informaci√≥n sobre una entidad concreta, considerados una unidad).
Las filas y las columnas, en principio, carecen de orden a la hora de ser almacenadas. Aunque en la implementaci√≥n del dise√±o f√≠sico de cada SGBD esto no suele ser as√≠. Por ejemplo, en SQL Server si a√±adimos una clave de tipo "Clustered" a una tabla haremos que los datos se ordenen f√≠sicamente por el campo correspondiente.
El orden de las columnas lo determina cada consulta (que se realizan usando SQL).
Cada tabla debe poseer una clave primaria, esto es, un identificador √∫nico de cada registro compuesto por una o m√°s columnas.
Para establecer una relaci√≥n entre dos tablas es necesario incluir, en forma de columna, en una de ellas la clave primaria de la otra. A esta columna se le llama clave externa. Ambos conceptos de clave son extremadamente importantes en el dise√±o de bases de datos.
Bas√°ndose en estos principios se dise√±an las diferentes bases de datos relacionales, definiendo un dise√±o conceptual y un dise√±o l√≥gico, que luego se implementa en el dise√±o f√≠sico usando para ello el gestor de bases de datos de nuestra elecci√≥n (por ejemplo SQL Server).

Por ejemplo, consideremos la conocida base de datos Northwind de Microsoft.

Icono bbdd Aprende SQL desde cero: Los fundamentos que te servir√°n para siempre üëâ Clic aqu√≠
Esta base de datos representa un sistema sencillo de gesti√≥n de pedidos para una empresa ficticia. Existen conceptos que hay que manejar como: proveedores, empleados, clientes, empresas de transporte, regiones geogr√°ficas, y por supuesto pedidos y productos.

El dise√±o conceptual de la base de datos para manejar toda esta informaci√≥n se puede ver en la siguiente figura, denominada diagrama Entidad/Relaci√≥n o simplemente diagrama E-R:

Northwind_EF
(pulsa para aumentar)

Como vemos existen tablas para representar cada una de estas entidades del mundo real: Proveedores (Suppliers), Productos, Categor√≠as de productos,  Empleados, Clientes, Transportistas (Shippers), y Pedidos (Orders) con sus correspondientes l√≠neas de detalle (Order Details).

Adem√°s est√°n relacionadas entre ellas de modo que, por ejemplo, un producto pertenece a una determinada categor√≠a (se relacionan por el campo CategoryID) y un proveedor (SupplierID), y lo mismo con las dem√°s tablas.

Cada tabla posee una serie de campos que representan valores que queremos almacenar para cada entidad. Por ejemplo, un producto posee los siguientes atributos que se traducen en los campos correspondientes para almacenar su informaci√≥n: Nombre (ProductName), Proveedor (SupplierID, que identifica al proveedor), Categor√≠a a la que pertenece (CategoryID), Cantidad de producto por cada unidad a la venta (QuantityPerUnit), Precio unitario (UnitPrice), Unidades que quedan en stock (UnitsInStock), Unidades de ese producto que est√°n actualmente en pedidos (UnitsOnOrder), qu√© cantidad debe haber para que se vuelva a solicitar m√°s producto al proveedor (ReorderLevel) y si est√° descatalogado o no (Discontinued).

Los campos marcados con "PK" indican aquellos que son claves primarias, es decir, que identifican de manera √∫nica a cada entidad. Por ejemplo, ProductID es el identificador √∫nico del producto, que ser√° por regla general un n√∫mero entero que se va incrementando cada vez que introducimos un nuevo producto (1, 2, 3, etc..).

Los campos marcados como "FK" son claves for√°neas o claves externas.  Indican campos que van a almacenar claves primarias de otras tablas de modo que se puedan relacionar con la tabla actual. Por ejemplo, en la tabla de productos el campo CategoryID est√° marcado como "FK" porque en √©l se guardar√° el identificador √∫nico de la categor√≠a asociada al producto actual. En otras palabras: ese campo almacenar√° el valor de la clave primaria (PK) de la tabla de categor√≠as que identifica a la categor√≠a en la que est√° ese producto.

Los campos marcados con indicadores que empiezan por "I" (ej: "I1") se refieren a √≠ndices. Los √≠ndices generan informaci√≥n adicional para facilitar la localizaci√≥n m√°s r√°pida de registros bas√°ndose en esos campos. Por ejemplo, en la tabla de empleados (Employees) existe un √≠ndice "I1" del que forman parte los campos Nombre y Apellidos (en negrita adem√°s porque ser√°n tambi√©n valores √∫nicos) y que indica que se va a facilitar la locaci√≥n de los clientes mediante esos datos. Tambi√©n tiene otro √≠ndice "I2" en el campo del c√≥digo postal para localizar m√°s r√°pidamente a todos los clientes de una determinada zona.

Los campos marcados con indicadores que empiezan con "U" (por ejemplo U1) se refieren a campo que deben ser √∫nicos. Por ejemplo, en la tabla de categor√≠as el nombre de √©sta (CategoryName) debe ser √∫nico, es decir, no puede haber -l√≥gicamente- dos categor√≠as con el mismo nombre.

Como vemos, un dise√±o conceptual no es m√°s que una representaci√≥n formal y acotada de entidades que existen en el mundo real, as√≠ como de sus restricciones, y que est√°n relacionadas con el dominio del problema que queremos resolver.

Modelo l√≥gico
Una vez tenemos claro el modelo E-R debemos traducirlo a un modelo l√≥gico directamente en el propio sistema gestor de bases de datos (Oracle, MySQL, SQL Server...). Si hemos utilizado alguna herramienta profesional para crear el diagrama E-R, seguramente podremos generar autom√°ticamente las instrucciones necesarias para crear la base de datos.

La mayor√≠a de los generadores de diagramas E-R (por ejemplo Microsoft Visio) ofrecen la capacidad de exportar el modelo directamente a los SGBD m√°s populares.

Entonces, todo este modelo conceptual se traduce en un modelo l√≥gico que trasladaremos a la base de datos concreta que estemos utilizando y que generalmente ser√° muy parecido. Por ejemplo, este es el mismo modelo anterior, mostrado ya como tablas en un diagrama de SQL Server:

Northwind_Tablas
(pulsa para aumentar)

En este caso hemos creado cada tabla, una a una, siguiendo lo identificado en el diagrama E-R y estableciendo √≠ndices y dem√°s elementos seg√∫n las indicaciones de cada uno de los campos. Adem√°s hemos decidido el mejor tipo de datos que podemos aplicar a cada campo (texto, n√∫meros, fechas... que se almacenan para cada registro).

Su representaci√≥n gr√°fica en la base de datos es muy similar, sin embargo el modelo f√≠sico (c√≥mo se almacena esto f√≠sicamente), puede variar mucho de un SGBD a otro y seg√∫n la configuraci√≥n que le demos.

En resumen
Seg√∫n Thomas H. Grayson, un buen dise√±o de base de datos debe poseer siempre las siguientes cualidades, aunque algunas puede llegar a ser contradictorias entre s√≠:

Reflejar la estructura del problema en el mundo real.
Ser capaz de representar todos los datos esperados, incluso con el paso del tiempo.
Evitar el almacenamiento de informaci√≥n redundante.
Proporcionar un acceso eficaz a los datos.
Mantener la integridad de los datos a lo largo del tiempo.
Ser claro, coherente y de f√°cil comprensi√≥n.
Como hemos visto el dise√±o de una base de datos parte de un problema real que queremos resolver y se traduce en una serie de modelos, conceptual, l√≥gico y f√≠sico, que debemos implementar.

El primero, el dise√±o conceptual, es el que m√°s tiempo nos va a llevar pues debemos pensar muy bien c√≥mo vamos a representar las entidades del mundo real que queremos representar, qu√© datos almacenaremos, c√≥mo los relacionaremos entre s√≠, etc...

El dise√±o l√≥gico es mucho m√°s sencillo puesto que no es m√°s que pasar el dise√±o anterior a una base de datos concreta. De hecho muchas herramientas profesionales nos ofrecen la generaci√≥n autom√°tica del modelo, por lo que suele ser muy r√°pido.

El dise√±o f√≠sico por regla general recae en la propia base de datos, a partir del dise√±o l√≥gico, aunque si dominamos bien esa parte elegiremos cuidadosamente √≠ndices, restricciones o particiones as√≠ como configuraciones para determinar c√≥mo se almacenar√° f√≠sicamente esa informaci√≥n, en qu√© orden, c√≥mo se repartir√° f√≠sicamente en el almacenamiento, etc...
